apiVersion: apps/v1
kind: Deployment
metadata:
  name: dots-ocr
  namespace: vllm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dots-ocr
  template:
    metadata:
      labels:
        app: dots-ocr
    spec:
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      automountServiceAccountToken: false
      nodeSelector:
        eks.amazonaws.com/instance-family: g6e
      containers:
        - name: vllm
          image: rednotehilab/dots.ocr:vllm-openai-v0.9.1
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
            seccompProfile:
              type: RuntimeDefault
          command: ["/bin/bash", "-c"]
          args:
            - |
              set -e
              echo "Setting up dots.ocr following official steps..."
              
              # Clone the repository if not already present
              if [ ! -d "/root/dots.ocr" ]; then
                echo "Cloning dots.ocr repository..."
                cd /root
                git clone https://github.com/rednote-hilab/dots.ocr.git
                cd dots.ocr
                pip install -e .
              fi
              
              # Download model using their tool
              cd /root/dots.ocr
              if [ ! -d "./weights/DotsOCR" ]; then
                echo "Downloading model weights using official tool..."
                python3 tools/download_model.py
              fi
              
              # Set up environment
              export hf_model_path=/root/dots.ocr/weights/DotsOCR
              export PYTHONPATH=$(dirname "$hf_model_path"):$PYTHONPATH
              
              # Register model with vLLM
              echo "Registering DotsOCR with vLLM..."
              if ! grep -q "from DotsOCR import modeling_dots_ocr_vllm" $(which vllm); then
                sed -i '/^from vllm\.entrypoints\.cli\.main import main$/a\
              from DotsOCR import modeling_dots_ocr_vllm' $(which vllm)
              fi
              
              # Launch vLLM server exactly as documented
              echo "Starting vLLM server..."
              exec vllm serve ${hf_model_path} \
                --tensor-parallel-size=1 \
                --gpu-memory-utilization=0.95 \
                --chat-template-content-format=string \
                --served-model-name=dots-ocr \
                --trust-remote-code
          env:
            - name: HUGGING_FACE_HUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hf-token
                  key: token
          ports:
            - name: http
              containerPort: 8000
          resources:
            requests:
              nvidia.com/gpu: 1
            limits:
              nvidia.com/gpu: 1
          volumeMounts:
            - name: huggingface-cache
              mountPath: /root/.cache/huggingface
      volumes:
        - name: huggingface-cache
          persistentVolumeClaim:
            claimName: huggingface-cache
      tolerations:
        - key: nvidia.com/gpu
          operator: Exists
          effect: NoSchedule
---
apiVersion: v1
kind: Service
metadata:
  name: dots-ocr
  namespace: vllm
spec:
  selector:
    app: dots-ocr
  ports:
    - name: http
      port: 8000
